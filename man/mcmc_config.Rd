% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-class.R
\docType{class}
\name{config-class}
\alias{config-class}
\alias{set_configs}
\title{MCMC Configuration Class and Constructor}
\usage{
set_configs(
  prior = NULL,
  theta_input = NULL,
  de_input = NULL,
  ncore = 3L,
  seed = NULL
)
}
\arguments{
\item{prior}{A `prior` object specifying the model's prior distributions}

\item{theta_input}{A `theta_input` object specifying parameter configurations}

\item{de_input}{A `de_input` object specifying DE-MCMC tuning parameters}

\item{ncore}{Integer specifying number of cores to use (default = 3L)}

\item{seed}{Optional random seed (if NULL, seeds are generated automatically)}
}
\value{
\describe{
  \item{`config` class}{An S4 object containing complete MCMC configuration}
  \item{`set_configs()`}{Returns a validated `config` object}
}
}
\description{
The `config` class collects complete MCMC sampling configurations, including
priors, parameter specifications, and Differential Evolution (DE) tuning
parameters. The `set_configs()` function provides a convenient constructor
for creating configuration objects.
}
\details{
The `config` class integrates all components needed for MCMC sampling:
\itemize{
  \item **Prior distributions** (from ggdmcPrior)
  \item **Parameter specifications**
  \item **DE-MCMC tuning parameters** (jump sizes: \code{rp} and \code{gamma_precursor}; 
migration probabilities, etc.)
  \item **Random number generation** with proper seed management
}

The constructor `set_configs()`:
\itemize{
  \item Automatically generates seeds when not specified
  \item Ensures worker seeds differ from main seed
  \item Validates core assignments
  \item Checks consistency between components
}

Each core runs a true independent `chain`, differing from the 
`chains`/`chromosome` used to help the DE-MC sampling to work.
}
\section{Slots}{

\describe{
\item{\code{prior}}{An object of class `prior` from ggdmcPrior package containing
prior distributions}

\item{\code{theta_input}}{An object of class `theta_input` containing parameter
specifications}

\item{\code{de_input}}{An object of class `de_input` containing DE-MCMC tuning
parameters}

\item{\code{seed}}{An integer vector of random seeds for worker chains}

\item{\code{main_seed}}{An integer for the main random seed}

\item{\code{core_id}}{An integer vector mapping cores to seeds}
}}

\section{Validation Rules}{

The class includes these validity checks:
\itemize{
  \item Worker seeds must differ from main seed
  \item Core IDs must be positive integers
  \item Components must be properly classed objects
}
}

\examples{
\dontrun{
# To create a configuration profile, we first set up a de_input

de_input <- setDEInput(
    sub_migration_prob = 0.00,
    nparameter = as.integer(sub_theta_input@nparameter),
    nchain = as.integer(sub_theta_input@nchain)
)

# Then a theta_input
theta_input <- setThetaInput(nmc = 2L, nchain = 3L, pnames = model@pnames, thin = 1)

# Finally we can use set_configs to create  configuration profile
configs <- set_configs(prior = sub_priors, theta_input = theta_input, 
de_input = de_input)

# The default setting is to set up three configurations for three independent chains
# You should ensure that you have three different starting `samples`.
cfg <- configs[[1]]
}

}
