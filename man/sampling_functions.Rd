% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sampling.R
\name{StartSampling}
\alias{StartSampling}
\alias{RestartSampling}
\alias{StartSampling_subject}
\alias{RestartSampling_subject}
\alias{StartSampling_hyper}
\alias{RestartSampling_hyper}
\title{Initialise or Continue MCMC Sampling}
\usage{
StartSampling(
  dmis,
  priors,
  samples_list = NULL,
  nmc = 500L,
  nchain = NULL,
  thin = 1L,
  report_length = 100L,
  max_init_attempts = 1000L,
  is_print = TRUE,
  pop_migration_prob = 0,
  sub_migration_prob = 0,
  gamma_precursor = 2.38,
  rp = 0.001,
  is_hblocked = FALSE,
  is_pblocked = FALSE,
  pop_debug = FALSE,
  sub_debug = FALSE,
  ncore = 3L,
  seed = NULL
)

RestartSampling(
  samples_list,
  nmc = 500L,
  nchain = NULL,
  thin = 1L,
  report_length = 100L,
  max_init_attempts = 1000L,
  is_print = TRUE,
  pop_migration_prob = 0,
  sub_migration_prob = 0,
  gamma_precursor = 2.38,
  rp = 0.001,
  is_hblocked = FALSE,
  is_pblocked = FALSE,
  pop_debug = FALSE,
  sub_debug = FALSE,
  seed = NULL
)

StartSampling_subject(
  dmi,
  priors,
  samples_list = NULL,
  nmc = 500L,
  nchain = NULL,
  thin = 1L,
  report_length = 100L,
  max_init_attempts = 1000L,
  is_print = TRUE,
  sub_migration_prob = 0,
  gamma_precursor = 2.38,
  rp = 0.001,
  is_pblocked = FALSE,
  sub_debug = FALSE,
  ncore = 3L,
  seed = NULL
)

RestartSampling_subject(
  samples_list,
  nmc = 500L,
  thin = 1L,
  report_length = 100L,
  max_init_attempts = 1000L,
  is_print = TRUE,
  sub_migration_prob = 0,
  gamma_precursor = 2.38,
  rp = 0.001,
  is_pblocked = FALSE,
  sub_debug = FALSE,
  seed = NULL
)

StartSampling_hyper(
  hyper_dmi,
  dmis,
  priors,
  samples_list = NULL,
  nmc = 500L,
  nchain = NULL,
  thin = 1L,
  report_length = 100L,
  max_init_attempts = 1000L,
  is_print = TRUE,
  sub_migration_prob = 0,
  gamma_precursor = 2.38,
  rp = 0.001,
  is_pblocked = FALSE,
  sub_debug = FALSE,
  ncore = 3L,
  seed = NULL
)

RestartSampling_hyper(
  samples_list,
  nmc = 500L,
  nchain = NULL,
  thin = 1L,
  report_length = 100L,
  max_init_attempts = 1000L,
  is_print = TRUE,
  sub_migration_prob = 0,
  gamma_precursor = 2.38,
  rp = 0.001,
  is_pblocked = FALSE,
  sub_debug = FALSE,
  seed = NULL
)
}
\arguments{
\item{dmis}{For hierarchical models: A list of data model instances (DMIs)
for each subject}

\item{priors}{A list of prior distributions}

\item{samples_list}{Either:
  \itemize{
    \item For Start* functions: Optional the user-initislised samples.
    \item For Restart* functions: Required previous samples object to
continue sampling
  }}

\item{nmc}{Number of MCMC iterations to run (default = 500)}

\item{nchain}{Number of independent chains (default = NULL for automatic
determination; not used in RestartSampling_subject)}

\item{thin}{Thinning interval (default = 1)}

\item{report_length}{Frequency of progress reports in iterations (default = 100)}

\item{max_init_attempts}{Maximum attempts to find valid initial values (default = 1000)}

\item{is_print}{Whether to print progress messages (default = TRUE)}

\item{pop_migration_prob}{Population-level chain migration probability (default = 0)}

\item{sub_migration_prob}{Subject-level chain migration probability (default = 0)}

\item{gamma_precursor}{Scaling factor for proposal distribution (default = 2.38)}

\item{rp}{Random perturbation factor to add noise to DE-MC proposal. The large the value,
the big the proposal will jump (default = 0.001)}

\item{is_hblocked}{Whether to use block updating for hyperparameters (default = FALSE)}

\item{is_pblocked}{Whether to use block updating for participant/subject
parameters (default = FALSE)}

\item{pop_debug}{Logical. Whether to print population level debugging information.}

\item{sub_debug}{Logical. Whether to print subject level debugging information.}

\item{ncore}{Number of CPU cores for parallel computation (default = 3)}

\item{seed}{Random seed for reproducibility (default = NULL for random seed)}

\item{dmi}{For single-subject models: A DMI instance for one subject}

\item{hyper_dmi}{For standard models: a DMI for hyperparameters using
`type`, `hyper`)}
}
\value{
An object containing MCMC samples, with class:
\itemize{
  \item `hierarchical_samples` for hierarchical versions
  \item `subject_samples` for single-subject versions
  \item `hyper_samples` for hyperparameter versions
}
}
\description{
These functions handle initialisation and continuation of Markov Chain Monte
Carlo (MCMC) sampling for hierarchical models, individual subjects, and
(merely) hyperparameter estimation (i.e., standard models).
}
\details{
\subsection{Function Types}{
\itemize{
  \item \strong{Hierarchical Models}:
  \itemize{
    \item `StartSampling`: initialise full hierarchical sampling
    \item `RestartSampling`: Continue hierarchical sampling
  }
  \item \strong{Single-Subject Models}:
  \itemize{
    \item `StartSampling_subject`: initialise single-subject sampling
    \item `RestartSampling_subject`: Continue single-subject sampling
  }
  \item \strong{Hyperparameter Models}:
  \itemize{
    \item `StartSampling_hyper`: initialise hyperparameter-only sampling
    \item `RestartSampling_hyper`: Continue hyperparameter-only sampling
  }
}}

\subsection{Key Features}{
\itemize{
  \item Adaptive MCMC with optional chain migration
  \item Parallel chain execution
  \item Progress reporting and convergence monitoring
  \item Three-level modeling (hyperparameter-only, population, and individual
        subjects)
}}
}
\section{Migration Parameters}{

The migration sampler helps to improve chain mixing at different levels:
\itemize{
  \item `pop_migration_prob`: For population-level parameters
  \item `sub_migration_prob`: For subject-level parameters and
hyper-only parameters.
}. The sampler essentially compares the self chain against its neighbouring
chains, and updates the self chain when the neighboring chain results
in higher likelihood. The user must be aware that such a strategy may
result in an optimisation process falls into a local maximum (likelihood).
}

\examples{
\dontrun{
# Hierarchical models
hier_fits0 <- StartSampling(pop_dmis, pop_priors,
    sub_migration_prob = 0.05,
    thin = 8L, pop_debug = F, seed = 9032
)

hier_fits1 <- RestartSampling(hier_fits0,
    pop_migration_prob = 0.02,
    sub_migration_prob = 0.00,
    thin = 4L, seed = 9032
)

# Single-subject models
subj_fits0 <- StartSampling_subject(sub_dmis[[1]], sub_priors,
    sub_migration_prob = 0.02,
    thin = 2, seed = 9032
)

subj_fits1 <- RestartSampling_subject(subj_fits0,
    sub_migration_prob = 0.00, thin = 4, seed = 9032
)

# Hyperparameter models
hyper_fits0 <- StartSampling_hyper(hyper_dmi, pop_dmis, pop_priors,
    sub_migration_prob = 0.05, thin = 4
)

hyper_fits1 <- RestartSampling_hyper(fits0, sub_migration_prob = 0.00, thin = 2)
}

}
\seealso{
\code{\link{RebuildPosterior}} for combining chains
}
