// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_subject
Rcpp::S4 run_subject(const Rcpp::S4& config_r, const Rcpp::S4& dmi, const Rcpp::S4& samples);
RcppExport SEXP _ggdmc_run_subject(SEXP config_rSEXP, SEXP dmiSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type config_r(config_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type dmi(dmiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(run_subject(config_r, dmi, samples));
    return rcpp_result_gen;
END_RCPP
}
// run_hyper
Rcpp::S4 run_hyper(const Rcpp::S4& config_r, const Rcpp::S4& dmi, const Rcpp::S4& samples);
RcppExport SEXP _ggdmc_run_hyper(SEXP config_rSEXP, SEXP dmiSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type config_r(config_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type dmi(dmiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(run_hyper(config_r, dmi, samples));
    return rcpp_result_gen;
END_RCPP
}
// run
Rcpp::List run(const Rcpp::S4& config_r, const Rcpp::List& dmis, const Rcpp::List& samples);
RcppExport SEXP _ggdmc_run(SEXP config_rSEXP, SEXP dmisSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type config_r(config_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dmis(dmisSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(run(config_r, dmis, samples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggdmc_run_subject", (DL_FUNC) &_ggdmc_run_subject, 3},
    {"_ggdmc_run_hyper", (DL_FUNC) &_ggdmc_run_hyper, 3},
    {"_ggdmc_run", (DL_FUNC) &_ggdmc_run, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggdmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
